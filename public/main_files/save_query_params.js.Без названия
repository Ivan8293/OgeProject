"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var appendQueryParams = function appendQueryParams(searchString, url) {
  if (!searchString) {
    return;
  }

  var prevSearchString = sessionStorage.getItem('searchString');

  if (prevSearchString) {
    if (prevSearchString.includes('form_id')) {
      sessionStorage.setItem('searchString', '');
    }
  } else {
    sessionStorage.setItem('searchString', searchString);
  }
};

var appendAllQueryParamsToURL = function appendAllQueryParamsToURL(href) {
  var url = new URL(href);
  appendQueryParams(window.location.search, url);
  url.searchParams.set('timezone', Intl.DateTimeFormat().resolvedOptions().timeZone);
  return url.toString();
};

window.addEventListener('load', function () {
  var updateForm = function updateForm(form) {
    var action = form.action;

    if (typeof action == 'string') {
      form.setAttribute('action', appendAllQueryParamsToURL(action));
    }
  };

  var updateLink = function updateLink(link) {
    var href = link.href;
    link.setAttribute('href', appendAllQueryParamsToURL(href));
  };

  var observerForm = new MutationObserver(function (mutationsList) {
    var _iterator = _createForOfIteratorHelper(mutationsList),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var mutation = _step.value;

        if (mutation.type === 'attributes' && mutation.attributeName === 'action') {
          updateForm(mutation.target);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  });
  var observerLink = new MutationObserver(function (mutationsList) {
    var _iterator2 = _createForOfIteratorHelper(mutationsList),
        _step2;

    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var mutation = _step2.value;

        if (mutation.type === 'attributes' && mutation.attributeName === 'action') {
          updateForm(mutation.target);
        }
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  });

  var _iterator3 = _createForOfIteratorHelper(document.forms),
      _step3;

  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var form = _step3.value;
      updateForm(form);
      observerForm.observe(form, {
        attributes: true
      });
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }

  var _iterator4 = _createForOfIteratorHelper(document.links),
      _step4;

  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var link = _step4.value;
      var href = link.href,
          hash = link.hash;

      if (!hash && href.startsWith(window.location.origin)) {
        updateLink(link);
        observerLink.observe(link, {
          attributes: true
        });
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
});
